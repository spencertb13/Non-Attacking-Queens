    public class NonAttackingQueens
{
    private static int [][] board = new int[8][8];

    private static int count = 0;

    public void rowN(int n, int y)
    {
        if(onBoard(n, y) != -1)     
        {
            if(validMove(n, y) == 0) //If the move is valid (0) then it puts a 1 at those coordinates and moves on to the next method (RowTwo)
            {
                board[n][y] = 1;
                if(n<7) {
                    rowN(n+1, 0);
                }
                else {
                    count++;
                    System.out.println(toString());
                }
            }

            board[n][y] = 0;
            rowN(n, y + 1);
        }
    }


    public static int validMove(int row, int col)
    {
        for (int i = 0; i < 8; i++)
        {
            if(onBoard(row, i) == 1) //Checks side to side
            {
                return -1;
            }
            if(onBoard(i, col) == 1) //Checks up and down
            {
                return -1;
            }

        }

        //Checks Diagonally
        for(int i = 0; i < 8; i++)
        {
            if(onBoard(row - i, col - i) == 1) //checks up and left
            {
                return -1;
            }

            if(onBoard(row - i, col + i) == 1) //checks up and right
            {
                return -1;
            }
            if(onBoard(row + i, col - i) == 1) //checks down and left
            {
                return -1;
            }
            if(onBoard(row + i, col + i) == 1) //checks down and right
            {
                return -1;
            }
        }


        return 0; //if it works
    }

    public static int onBoard(int row, int col)
    {
        if(row < 0 || col < 0 || row > 7 || col > 7) //checks if it is valid on the board
        {
            return -1;
        }


        return board[row][col]; //returns what the value is at the valid point
    }

    public String toString()
    {
        System.out.println(print());
        String ans = "Solution: ";
        ans += count;

        return ans;
    }

    public static String print()
    {
        String sol = "Solution: " + count;
        String result = "\n";
        for (int row = 0; row < board.length; row++)
        {
            for(int column = 0; column < board[row].length; column++)
            {
                result += board[row][column] + "\t";
            }
            result += "\n";
        }
        return result;

    }
}
